#include <stdio.h>
#include <algorithm>

int* KnapsackDP(int* w, int* v, int n, int wx) {
    int** dp = new int*[n + 1];
    for (int i = 0; i <= n; i++) {
        dp[i] = new int[wx + 1];
    }
    for (int i = 0; i <= n; i++) {
        for (int j = 0; j <= wx; j++) {
            if (i == 0 || j == 0) {
                dp[i][j] = 0;
            } else if (w[i - 1] <= j) {
                dp[i][j] = std::max(v[i - 1] + dp[i - 1][j - w[i - 1]], dp[i - 1][j]);
            } else {
                dp[i][j] = dp[i - 1][j];
            }
        }
    }
    int* x = new int[n];
    int res = dp[n][wx];
    for (int i = n, j = wx; i > 0 && res > 0; i--) {
        if (res == dp[i - 1][j]) {
            continue;
        } else {
            x[i - 1] = 1;
            res -= v[i - 1];
            j -= w[i - 1];
        }
    }
    for (int i = 0; i <= n; i++) {
        delete[] dp[i];
    }
    delete[] dp;
    return x;
}

int main() {
    int n = 5, wx = 11;
    int w[5] = {1, 2, 5, 6, 7};
    int v[5] = {1, 6, 18, 22, 28};
    int* x = KnapsackDP(w, v, n, wx);
    printf("Items taken: ");
    for (int i = 0; i < n; i++) {
        if (x[i] == 1) {
            printf("%d ", i + 1);
        }
    }
    delete[] x;
    return 0;
}
