#include <stdio.h>
#include <algorithm>

struct Item {
    int weight;
    int value;
    double ratio;
};

bool compare(Item a, Item b) {
    return a.ratio > b.ratio;
}

int* KnapsackGreedy(int* w, int* v, int n, int wx) {
    Item* items = new Item[n];
    for (int i = 0; i < n; i++) {
        items[i].weight = w[i];
        items[i].value = v[i];
        items[i].ratio = (double)v[i] / w[i];
    }
    std::sort(items, items + n, compare);
    int* x = new int[n];
    for (int i = 0; i < n; i++) {
        x[i] = 0;
    }
    int currentWeight = 0;
    for (int i = 0; i < n; i++) {
        if (currentWeight + items[i].weight <= wx) {
            x[i] = 1;
            currentWeight += items[i].weight;
        }
    }
    delete[] items;
    return x;
}

int main() {
    int n = 5, wx = 11;
    int w[5] = { 1, 2, 5, 6, 7 };
    int v[5] = { 1, 6, 18, 22, 28 };
    int* x = KnapsackGreedy(w, v, n, wx);
    printf("Items taken: ");
    for (int i = 0; i < n; i++) {
        if (x[i] == 1) {
            printf("%d ", i + 1);
        }
    }
    delete[] x;
    return 0;
}
