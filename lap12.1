#include <stdio.h>
#include <limits.h>

int minDistance(int dist[], bool sptSet[], int n) {
    int min = INT_MAX, min_index;
    for (int v = 0; v < n; v++) {
        if (sptSet[v] == false && dist[v] <= min) {
            min = dist[v];
            min_index = v;
        }
    }
    return min_index;
}

void printSolution(int dist[], int n) {
    printf("Vertex \t Distance from Source\n");
    for (int i = 0; i < n; i++) {
        printf("%d \t %d\n", i, dist[i]);
    }
}

int* Dijkstra(int* graph, int n) {
    int* dist = new int[n];
    bool* sptSet = new bool[n];
    for (int i = 0; i < n; i++) {
        dist[i] = INT_MAX;
        sptSet[i] = false;
    }
    dist[0] = 0;
    for (int count = 0; count < n - 1; count++) {
        int u = minDistance(dist, sptSet, n);
        sptSet[u] = true;
        for (int v = 0; v < n; v++) {
            if (!sptSet[v] && graph[u * n + v] && dist[u] != INT_MAX
                && dist[u] + graph[u * n + v] < dist[v]) {
                dist[v] = dist[u] + graph[u * n + v];
            }
        }
    }
    return dist;
}

int main() {
    int n = 5;
    int* g = new int[n * n];
    for (int i = 0; i < n * n; i++) {
        g[i] = -1;
    }
    g[0 * n + 1] = 100;
    g[0 * n + 2] = 80;
    g[0 * n + 3] = 30;
    g[0 * n + 4] = 10;
    g[1 * n + 2] = 20;
    g[3 * n + 1] = 20;
    g[3 * n + 2] = 20;
    g[4 * n + 3] = 10;

    int* d = Dijkstra(g, n);
    printf("Shortest distances from source:\n");
    printSolution(d, n);
    delete[] d;
    delete[] g;
    return 0;
}
